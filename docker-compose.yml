services:
  # Graphiti Claude Code MCP Server
  graphiti-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphiti-claude-code-mcp
    environment:
      # 1Password Service Account Token (CRITICAL: must be passed to container)
      # This is needed by the SDK inside the container for runtime secret access
      - OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}

      # Core configuration from direnv/1Password
      - GRAPHITI_GROUP_ID=${GRAPHITI_GROUP_ID}
      - NEO4J_URI=${NEO4J_URI}
      - NEO4J_USER=${NEO4J_USER}
      - NEO4J_DATABASE=${NEO4J_DATABASE}
      - NEO4J_PASSWORD=${NEO4J_PASSWORD}

      # Model configuration from direnv/1Password
      - OPENAI_MODEL=${OPENAI_MODEL}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL}
      - USE_OLLAMA=${USE_OLLAMA}
      - OLLAMA_HOST=${OLLAMA_HOST}
      - OLLAMA_MODEL=${OLLAMA_MODEL}
      - OLLAMA_EMBEDDING_MODEL=${OLLAMA_EMBEDDING_MODEL}
      - OLLAMA_EMBEDDING_DIM=${OLLAMA_EMBEDDING_DIM}
      - OPENAI_API_KEY=${OPENAI_API_KEY}

      # Runtime configuration from direnv/1Password
      - GRAPHITI_FALLBACK_MODE=${GRAPHITI_FALLBACK_MODE}
      - GRAPHITI_BATCH_SIZE=${GRAPHITI_BATCH_SIZE}
      - MEMORY_DECAY_FACTOR=${MEMORY_DECAY_FACTOR}
      - MEMORY_INCLUDE_HISTORICAL=${MEMORY_INCLUDE_HISTORICAL}
      - ENABLE_GTD_INTEGRATION=${ENABLE_GTD_INTEGRATION}
      - ENABLE_CROSS_REFERENCES=${ENABLE_CROSS_REFERENCES}

      # MCP and Langfuse configuration from direnv/1Password
      - MCP_SERVER_NAME=graphiti-claude-code-mcp
      - LOG_LEVEL=${LOG_LEVEL}
      - LANGFUSE_HOST=${LANGFUSE_HOST}
      - LANGFUSE_TRACING_ENABLED=${LANGFUSE_TRACING_ENABLED}
      - LANGFUSE_PUBLIC_KEY=${LANGFUSE_PUBLIC_KEY}
      - LANGFUSE_SECRET_KEY=${LANGFUSE_SECRET_KEY}

      # OpenTelemetry and Sampling from direnv/1Password
      - OTEL_EXPORTER_OTLP_ENDPOINT=${OTEL_EXPORTER_OTLP_ENDPOINT}
      - OTEL_SERVICE_NAME=${OTEL_SERVICE_NAME}
      - OTEL_TRACES_EXPORTER=${OTEL_TRACES_EXPORTER}
      - OTEL_METRICS_EXPORTER=${OTEL_METRICS_EXPORTER}
      - OTEL_INSTRUMENTATION_ENABLED=${OTEL_INSTRUMENTATION_ENABLED}
      - INFRASTRUCTURE_BASE_SAMPLE_RATE=${INFRASTRUCTURE_BASE_SAMPLE_RATE}
      - INFRASTRUCTURE_MAX_SAMPLE_RATE=${INFRASTRUCTURE_MAX_SAMPLE_RATE}
      - MEMORY_PRESSURE_THRESHOLD=${MEMORY_PRESSURE_THRESHOLD}
      - LATENCY_THRESHOLD_SECONDS=${LATENCY_THRESHOLD_SECONDS}
      - CASCADE_WINDOW_SECONDS=${CASCADE_WINDOW_SECONDS}

      # SSL Configuration for OrbStack
      - SSL_CERT_FILE=/usr/local/share/ca-certificates/orbstack-root.crt
      - REQUESTS_CA_BUNDLE=/usr/local/share/ca-certificates/orbstack-root.crt

      # SSL Bypass for Development (remove in production)
      - PYTHONHTTPSVERIFY=0
      - CURL_CA_BUNDLE=""
      - SSL_VERIFY=false

      # Disable telemetry to avoid SSL errors
      - POSTHOG_DISABLED=true
      - GRAPHITI_TELEMETRY_ENABLED=false

      # Corporate proxy bypass
      - NO_PROXY=localhost,127.0.0.1,*.local,neo4j.graphiti.local

    volumes:
      # Mount local code for development
      - .:/app
      # Mount shared .env.graphiti
      - ${HOME}/gtd-coach/.env.graphiti:/app/.env.graphiti:ro
      # Mount Claude commands output directory
      - ${HOME}/.claude/commands:/root/.claude/commands
      # Mount Neo4j query logs for correlation (read-only)
      - ${HOME}/Documents/1_projects/graphiti-neo4j/neo4j/logs:/var/lib/neo4j/logs:ro

    ports:
      # MCP server port (if needed for debugging)
      - "5173:5173"

    networks:
      - graphiti-network

    command: python mcp_server.py

    # Limit restart attempts to prevent rapid rate limit consumption
    restart: on-failure:3

    # Neo4j runs in separate graphiti-neo4j project
    # No dependency needed here

    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from secrets_manager import SecretsManager; asyncio.run(SecretsManager.get_instance())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Utility service for running Neo4j test commands
  test-runner:
    image: neo4j:5.26-community
    container_name: graphiti-test-runner
    networks:
      - graphiti-network
    restart: "no"
    entrypoint: ["/bin/sh", "-c"]
    command: ["echo 'Test runner ready'"]

networks:
  graphiti-network:
    name: orbstack-shared
    external: true

# Note: This compose file assumes Neo4j is already running in the graphiti-neo4j project
# on port 7687 with proper authentication configured via 1Password
