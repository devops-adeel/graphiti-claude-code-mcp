services:
  # Graphiti Claude Code MCP Server
  graphiti-mcp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: graphiti-claude-code-mcp
    environment:
      # 1Password Service Account Token (from host environment or .env)
      - OP_SERVICE_ACCOUNT_TOKEN=${OP_SERVICE_ACCOUNT_TOKEN}

      # CRITICAL: Must match GTD Coach for bi-directional knowledge sharing
      - GRAPHITI_GROUP_ID=${GRAPHITI_GROUP_ID:-shared_knowledge}
      # For OrbStack networking - use the container name directly
      - FALKORDB_HOST=falkordb
      - FALKORDB_PORT=${FALKORDB_PORT:-6379}
      # CRITICAL: Must use same database as GTD Coach
      - FALKORDB_DATABASE=${FALKORDB_DATABASE:-shared_gtd_knowledge}

      # Non-secret configuration values
      - OPENAI_MODEL=${OPENAI_MODEL:-gpt-4o-mini}
      - OPENAI_EMBEDDING_MODEL=${OPENAI_EMBEDDING_MODEL:-text-embedding-3-small}

      # Memory Configuration
      - MEMORY_DECAY_FACTOR=${MEMORY_DECAY_FACTOR:-0.95}
      - MEMORY_INCLUDE_HISTORICAL=${MEMORY_INCLUDE_HISTORICAL:-false}
      - ENABLE_GTD_INTEGRATION=${ENABLE_GTD_INTEGRATION:-true}
      - ENABLE_CROSS_REFERENCES=${ENABLE_CROSS_REFERENCES:-true}

      # MCP Server Configuration
      - MCP_SERVER_NAME=graphiti-claude-code-mcp
      - LOG_LEVEL=${LOG_LEVEL:-INFO}

    volumes:
      # Mount local code for development
      - .:/app
      # Mount shared .env.graphiti
      - ${HOME}/gtd-coach/.env.graphiti:/app/.env.graphiti:ro
      # Mount Claude commands output directory
      - ${HOME}/.claude/commands:/root/.claude/commands

    ports:
      # MCP server port (if needed for debugging)
      - "5173:5173"

    networks:
      - graphiti-network

    command: python mcp_server.py

    restart: unless-stopped

    depends_on:
      - falkordb-check

    healthcheck:
      test: ["CMD", "python", "-c", "import asyncio; from secrets_manager import SecretsManager; asyncio.run(SecretsManager.get_instance())"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Health check service to ensure FalkorDB is available
  falkordb-check:
    image: redis:7-alpine
    container_name: falkordb-health-check
    command: >
      sh -c "
        until redis-cli -h falkordb.local -p 6379 ping; do
          echo 'Waiting for FalkorDB at falkordb.local:6379...'
          sleep 2
        done
        echo 'FalkorDB is ready!'
      "
    networks:
      - graphiti-network
    restart: "no"

  # Utility service for running test commands
  test-runner:
    image: redis:7-alpine
    container_name: graphiti-test-runner
    networks:
      - graphiti-network
    restart: "no"
    entrypoint: ["/bin/sh", "-c"]
    command: ["echo 'Test runner ready'"]

networks:
  graphiti-network:
    name: falkordb_default
    external: true

# Note: This compose file assumes FalkorDB is already running via OrbStack
# on port 6379 as configured in /Users/adeel/Documents/1_projects/falkordb/docker-compose.yml
